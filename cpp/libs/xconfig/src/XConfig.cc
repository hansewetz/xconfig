#include "xconfig/XConfig.h"
#include "xconfig/driver.h"
#include "xconfig/Mmvm.h"
#include <strstream>
#include <memory>
#include <stdexcept>
#include <fstream>
#include <iostream>
using namespace std;
using namespace xconfig;
namespace xconfig{

// ctors
XConfig::XConfig():vm_(make_shared<Mmvm>()),basicx_(vm_){
  compileAndRun(cin,"stdin");
}
XConfig::XConfig(string const&cfgpath):vm_(make_shared<Mmvm>()),basicx_(vm_){
  // open input stream
  ifstream is(cfgpath.c_str(),ifstream::in);
  if(!is)throw runtime_error("failed opening file: "s+cfgpath+" for reading");
  compileAndRun(is,cfgpath);
}
XConfig::XConfig(istream&is,string const&name):vm_(make_shared<Mmvm>()),basicx_(vm_){
  compileAndRun(is,name);
}
// compile and run from an input stream
void XConfig::compileAndRun(istream&is,string const&name){
  // setup for compilation
  strstream errstr;
  comp_driver driver(vm_,errstr);
  driver.trace_scanning(false);    // NOTE! hard coded
  driver.trace_parsing(false);     // ...

  // parse/compile file
  if(!driver.parse(is,name)){
    throw runtime_error("failed compiling input file: "s+name+", error: "+errstr.str());
  }
  // validate generated code
  auto vmerr=vm_->validatecode();
  if(vmerr){
    throw runtime_error("<internal compilation error> - failed validating generated bytecode, error: "s+vmerr.tostring());
  }
  // run program
  vm_->run();
}
// get basic extractor
BasicExtractor const&XConfig::basicx()const{return basicx_;}

// simplified operaytions for extracting variables
map<string,string>XConfig::operator()()const{
  return basicx_();
}
optional<string>XConfig::operator()(string const&name)const{
  return basicx_(name);
}
map<string,optional<string>>XConfig::operator()(vector<string>const&v)const{
  return basicx_(v);
}
map<string,string>XConfig::operator()(regex const&r)const{
  return basicx_(r);
}
// get variables by Mmvm::Value
map<string,Mmvm::Value>XConfig::asValue()const{
  return basicx_.asValue();
}
optional<Mmvm::Value>XConfig::asValue(string const&name)const{
  return basicx_.asValue(name);
}
// dump vm related information
void XConfig::dumpprog(ostream&os)const{vm_->dumpprog(os);}
void XConfig::dumpstack(ostream&os)const{vm_->dumpstack(os);}
void XConfig::dumpmem(ostream&os)const{vm_->dumpmem(os);}
void XConfig::dumpsymtab(ostream&os)const{vm_->dumpsymtab(os);}
}
